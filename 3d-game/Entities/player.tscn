[gd_scene load_steps=7 format=3 uid="uid://1mk4dquwg3vl"]

[ext_resource type="PackedScene" uid="uid://crh0qq2efpv3i" path="res://Entities/gun.tscn" id="1_2b835"]

[sub_resource type="GDScript" id="GDScript_egy34"]
resource_name = "basic_movement"
script/source = "extends CharacterBody3D


const SPEED = 5.0
const JUMP_VELOCITY = 15
@onready var pivot: SpringArm3D = $camera
@onready var gun_animation_player = $camera/actual_camera/Gun/AnimationPlayer
@onready var gun_barrel = $camera/actual_camera/Gun/RayCast3D
@export var sens = 0.5
@export var damage = 1

var bullet = load(\"res://Entities/bullet.tscn\")
var instance

const MAX_HEALTH = 5
@export var health = MAX_HEALTH


func _enter_tree() -> void:
	$\"..\".set_multiplayer_authority(int(str($\"..\".name)))
	print(\"authority: \", int(str($\"..\".name)))

	if ($\"..\".is_multiplayer_authority()):
		$camera/actual_camera.make_current()


func _ready() -> void:
	if get_window().has_focus():
		print(Input.mouse_mode)
		Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	


func _input(event):
	if !$\"..\".is_multiplayer_authority():
		# only let the client that corresponds to this player control it
		return

	if event is InputEventMouseMotion:
		rotate_y(deg_to_rad(-event.relative.x*sens))
		pivot.rotate_x(deg_to_rad(-event.relative.y*sens))
		pivot.rotation.x = clamp(pivot.rotation.x,deg_to_rad(-90),deg_to_rad(90))
	if Input.is_key_pressed(KEY_ESCAPE):
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE

func _physics_process(delta: float) -> void:
	if !$\"..\".is_multiplayer_authority():
		# only let the client that corresponds to this player control it
		return

	if Input.is_action_pressed(\"shoot\"):
		if !gun_animation_player.is_playing():
			gun_animation_player.play(\"shoot\")
			instance = bullet.instantiate()
			instance.name = str(randf())
			#get_parent().get_parent().add_child(instance)
			add_child(instance)
			instance.global_position = gun_barrel.global_position
			instance.global_transform.basis = gun_barrel.global_transform.basis
			

	# Add the gravity.
	if not is_on_floor():
		velocity += get_gravity() * delta 

	# Handle jump.
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir := Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\")
	var direction := (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)
	
	var sprinting := Input.is_key_pressed(KEY_CTRL)
	if sprinting:
		velocity.x *= 2.
		velocity.z *= 2.

	move_and_slide()

func _process(delta: float) -> void:
	if !$\"..\".is_multiplayer_authority():
		# only let the client that corresponds to this player control it
		%Health.text = \"\"
		return
	%Health.text = \"Health: \" + str(self.health) + \"/\" + str(MAX_HEALTH)
	
func hit():
	self.health -= damage
	if self.health <= 0:
		print(\"dead\")
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_dsm1o"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_sop6y"]

[sub_resource type="SphereMesh" id="SphereMesh_5fhlu"]

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_pdqxr"]
properties/0/path = NodePath("player:position")
properties/0/spawn = true
properties/0/replication_mode = 1
properties/1/path = NodePath("player:rotation")
properties/1/spawn = true
properties/1/replication_mode = 1
properties/2/path = NodePath(".:position")
properties/2/spawn = true
properties/2/replication_mode = 1
properties/3/path = NodePath(".:rotation")
properties/3/spawn = true
properties/3/replication_mode = 1
properties/4/path = NodePath("player:health")
properties/4/spawn = true
properties/4/replication_mode = 1

[node name="Player" type="Node3D"]

[node name="player" type="CharacterBody3D" parent="." groups=["player"]]
script = SubResource("GDScript_egy34")

[node name="body_collision" type="CollisionShape3D" parent="player"]
shape = SubResource("CapsuleShape3D_dsm1o")

[node name="body_mesh" type="MeshInstance3D" parent="player"]
mesh = SubResource("CapsuleMesh_sop6y")

[node name="left_cheek" type="MeshInstance3D" parent="player/body_mesh"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.1, -0.3, 0.1)
visible = false
mesh = SubResource("SphereMesh_5fhlu")
skeleton = NodePath("")

[node name="right_cheek" type="MeshInstance3D" parent="player/body_mesh"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.1, -0.3, 0.1)
visible = false
mesh = SubResource("SphereMesh_5fhlu")
skeleton = NodePath("")

[node name="camera" type="SpringArm3D" parent="player"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.63765, 0)
spring_length = 0.0

[node name="actual_camera" type="Camera3D" parent="player/camera"]

[node name="Gun" parent="player/camera/actual_camera" instance=ExtResource("1_2b835")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.784493, -0.36934, -0.687308)

[node name="AudioStreamPlayer3D" type="AudioStreamPlayer3D" parent="player"]

[node name="SpotLight3D" type="SpotLight3D" parent="player"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.577, 0)
visible = false
light_energy = 34.461
light_indirect_energy = 11.135
light_volumetric_fog_energy = 8.225
light_size = 1.0
spot_range = 30.69

[node name="MultiplayerSpawner" type="MultiplayerSpawner" parent="player"]
_spawnable_scenes = PackedStringArray("res://Entities/bullet.tscn")
spawn_path = NodePath("..")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_pdqxr")

[node name="Control" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Health" type="Label" parent="Control"]
unique_name_in_owner = true
layout_mode = 0
offset_left = 47.0
offset_top = 30.0
offset_right = 132.0
offset_bottom = 53.0
text = "Health: 5/5"
